package io.p3admin.dataload;

import io.p3admin.model.domain.Patient;
import io.p3admin.repository.PatientRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Random;

@Component
@Profile("dataload")
@RequiredArgsConstructor
@Slf4j
public class MockDataLoader implements ApplicationRunner {
    private final List<String> names = List.of(
            "Lareina Chapman",
            "Jada Lamb",
            "Ryder Palmer",
            "Myles Lang",
            "Karina O'brien",
            "Lionel Little",
            "Hayley Stein",
            "Winter Fischer",
            "Wallace Saunders",
            "Magee Wise",
            "Alden Carr",
            "Linus Massey",
            "Judah Dyer",
            "Steel Scott",
            "Deacon Miles",
            "Xyla Robles",
            "Cooper Pugh",
            "Axel Hahn",
            "Regan Peterson",
            "Althea Dickerson",
            "Melodie Durham",
            "Holmes Woodard",
            "Rhoda Petersen",
            "Gavin Mcfarland",
            "Imogene Bell",
            "Clinton Herrera",
            "Rowan Cardenas",
            "Serena Bentley",
            "Tobias Tyler",
            "Imani Rosario",
            "Preston Hopper",
            "Francis Larsen",
            "Regina Cobb",
            "Wynter Poole",
            "Beau Gamble",
            "Erasmus Lester",
            "Brooke Summers",
            "Zachery Herring",
            "Garth Watson",
            "Reuben Buckley",
            "Odysseus Cohen",
            "Tana Farrell",
            "Murphy Davenport",
            "Ria Ford",
            "Daphne Moore",
            "Erasmus Baxter",
            "Lara Acosta",
            "Ryder Howard",
            "Virginia Gilmore",
            "Raya Kidd",
            "Robert Goff",
            "Carly Stephenson",
            "Judith Jimenez",
            "Shay Fernandez",
            "Michelle Bolton",
            "Owen Pugh",
            "Nash Harper",
            "Iona Walls",
            "Hope Jordan",
            "Tana Mathis",
            "Leah Wilkerson",
            "Ulla Fisher",
            "Alana Hale",
            "Malik Hebert",
            "Jameson Bonner",
            "Shay Bray",
            "Carlos Bullock",
            "Lois Melendez",
            "Dante Vasquez",
            "Hammett Baldwin",
            "Kieran Maldonado",
            "Maggie Armstrong",
            "Sierra Hall",
            "Elton Nieves",
            "Allegra Lott",
            "Stephanie Maddox",
            "Wyatt Little",
            "Noel Dickerson",
            "Ulla Wise",
            "Audra Sweet",
            "Baxter Stewart",
            "Hollee Zimmerman",
            "September Cooley",
            "Rajah Nieves",
            "Carl Blanchard",
            "Nehru Meadows",
            "Bruno Graves",
            "Harper Mueller",
            "Lynn Decker",
            "Rhiannon Pate",
            "Adam Gibson",
            "Nero Finch",
            "Tad Galloway",
            "Hillary Nunez",
            "Madeline Jackson",
            "Vivian Parrish",
            "Gemma Mercado",
            "Brooke Callahan",
            "Nash Graham",
            "Deacon Frank",
            "McKenzie Joseph",
            "Karina Salas",
            "Inga Ratliff"
    );

    private final List<String> mails = List.of(
            "nunc.est.mollis@aol.ca",
            "eu.turpis.nulla@yahoo.edu",
            "nunc.ullamcorper.velit@protonmail.ca",
            "vitae.velit@outlook.net",
            "integer.in.magna@outlook.ca",
            "nunc@google.ca",
            "adipiscing@icloud.org",
            "sit.amet@outlook.couk",
            "integer.eu.lacus@yahoo.edu",
            "at.pede@icloud.couk",
            "blandit.mattis@icloud.net",
            "metus.eu@protonmail.ca",
            "ante@hotmail.org",
            "est.nunc@outlook.ca",
            "auctor@aol.com",
            "aliquet.vel.vulputate@google.com",
            "ante.lectus.convallis@protonmail.org",
            "erat.etiam@outlook.net",
            "phasellus@hotmail.edu",
            "laoreet.posuere.enim@aol.edu",
            "ipsum.porta.elit@hotmail.couk",
            "consectetuer@yahoo.com",
            "aenean.eget@protonmail.edu",
            "elit.aliquam@outlook.net",
            "quam.pellentesque@icloud.com",
            "dui.semper@protonmail.net",
            "ipsum.nunc@protonmail.net",
            "proin.ultrices@yahoo.ca",
            "morbi.sit@yahoo.edu",
            "mauris.morbi@protonmail.ca",
            "sed.sem@protonmail.couk",
            "scelerisque.dui@icloud.net",
            "eget.tincidunt.dui@hotmail.com",
            "consectetuer.euismod.est@outlook.com",
            "augue.porttitor.interdum@icloud.edu",
            "cursus.in.hendrerit@yahoo.org",
            "eu.nibh.vulputate@protonmail.edu",
            "porttitor@hotmail.couk",
            "vivamus.molestie@google.com",
            "sodales.mauris@protonmail.couk",
            "tellus.non@aol.org",
            "aliquam@aol.org",
            "tincidunt.vehicula.risus@hotmail.couk",
            "ullamcorper.duis@outlook.net",
            "est.mauris@icloud.net",
            "venenatis.lacus@aol.com",
            "sit.amet@hotmail.edu",
            "mauris@icloud.ca",
            "interdum.curabitur@icloud.couk",
            "in.lorem@protonmail.net",
            "urna@protonmail.com",
            "purus.accumsan.interdum@icloud.edu",
            "dui.nec@protonmail.com",
            "ut.nisi.a@hotmail.edu",
            "vehicula.aliquet@google.net",
            "mollis.integer.tincidunt@google.edu",
            "mauris.ut.mi@google.org",
            "ipsum.leo@yahoo.edu",
            "scelerisque.sed.sapien@outlook.org",
            "magna.duis.dignissim@aol.com",
            "natoque@protonmail.couk",
            "dictum.eleifend.nunc@google.edu",
            "lorem.sit@aol.couk",
            "euismod.enim@hotmail.com",
            "non@protonmail.edu",
            "vestibulum@hotmail.com",
            "duis@outlook.org",
            "eu.nibh@google.org",
            "in.dolor@aol.ca",
            "in.tincidunt@hotmail.com",
            "adipiscing.ligula.aenean@hotmail.couk",
            "amet@hotmail.org",
            "sed.hendrerit@outlook.edu",
            "pede.malesuada@hotmail.com",
            "cursus.integer.mollis@outlook.net",
            "eget.massa@hotmail.ca",
            "sagittis.semper@outlook.ca",
            "curabitur@protonmail.com",
            "nunc.laoreet@protonmail.com",
            "mi.pede@icloud.com",
            "aenean.massa@outlook.edu",
            "nunc.sollicitudin@outlook.ca",
            "mi.enim.condimentum@aol.net",
            "enim@yahoo.edu",
            "quis.arcu@icloud.com",
            "ut.sem@yahoo.net",
            "morbi.tristique.senectus@outlook.org",
            "metus.urna@protonmail.com",
            "pellentesque.ultricies@protonmail.couk",
            "velit@outlook.ca",
            "mi@google.edu",
            "amet.risus@aol.com",
            "sit@google.ca",
            "dolor.egestas.rhoncus@outlook.couk",
            "magna.malesuada@outlook.edu",
            "sem.mollis@icloud.net",
            "at.nisi.cum@icloud.net",
            "vitae.odio@aol.ca",
            "libero.donec@outlook.couk",
            "sagittis.felis@aol.com"
    );

    private final List<String> socialSecurityNumbers = List.of(
            "1731",
            "5037",
            "3262",
            "4441",
            "8463",
            "7952",
            "1647",
            "3095",
            "8672",
            "3337",
            "2705",
            "2250",
            "5983",
            "7629",
            "6757",
            "8932",
            "3027",
            "9359",
            "4608",
            "3489",
            "8084",
            "5020",
            "7340",
            "4982",
            "1578",
            "9048",
            "7327",
            "9890",
            "7809",
            "1680",
            "6729",
            "7515",
            "1380",
            "2445",
            "2765",
            "7020",
            "9592",
            "6724",
            "2487",
            "9691",
            "5658",
            "7932",
            "1551",
            "9286",
            "8678",
            "8995",
            "2598",
            "4758",
            "2709",
            "3993",
            "9228",
            "5764",
            "3314",
            "2016",
            "3740",
            "6383",
            "6429",
            "6224",
            "9104",
            "6992",
            "2946",
            "3763",
            "8601",
            "3641",
            "8899",
            "2556",
            "8233",
            "1033",
            "8415",
            "1333",
            "5817",
            "9577",
            "4701",
            "9425",
            "6312",
            "7155",
            "7240",
            "4912",
            "7042",
            "5226",
            "5056",
            "1439",
            "9416",
            "4527",
            "9199",
            "6998",
            "8552",
            "3572",
            "2143",
            "2137",
            "4727",
            "9470",
            "6114",
            "4249",
            "7197",
            "9681",
            "5504",
            "8048",
            "5818",
            "9677",
            "1948",
            "3135"
    );

    private final PatientRepository patientRepo;

    @Override
    public void run(ApplicationArguments args) {
        if (patientRepo.count() < 100) {
            log.debug("Loading patient mock data");

            var rand = new Random();
            for (var securityNumber : socialSecurityNumbers) {
                var name = names.get(rand.nextInt(names.size())).split(" ");
                var mail = mails.get(rand.nextInt(mails.size()));
                var patient = new Patient();

                patient.setActive(Math.random() * 4 <= 3.0);
                patient.setSocialSecurityNumber(securityNumber);
                patient.setFirstname(name[0]);
                patient.setLastname(name[1]);
                patient.setEmail(mail);

                patientRepo.save(patient);
            }
        }
    }
}